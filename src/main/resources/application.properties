# This file contains general application properties.
# All properties that are environment specific are in their related property file (like database login data, logging level, etc.).

spring.profiles.active=@activeSpringProfile@
spring.main.allow-bean-definition-overriding=true
spring.jpa.open-in-view=true
spring.jpa.hibernate.ddl-auto=none
spring.data.jpa.repositories.bootstrap-mode=default
spring.main.banner-mode=off
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration

# General app settings
server.port=8080
server.host=https://<host>
anonymous.username.prefix=Ratsuchende_r 

# Allowed origins (CORS deactivated)
registration.cors.allowed.origins=
registration.cors.allowed.paths=

spring.mvc.locale=de_DE
spring.jackson.time-zone=Europe/Berlin

service.encryption.appkey=

# Base URL of the application
app.base.url=https://<host>

# Delete workflow
user.account.deleteworkflow.cron=0 0 0 * * ?
user.anonymous.deleteworkflow.cron=0 0 * * * ?
## Period of time before anonymous data will be deleted in minutes
## 2820 minutes = 47 hours
user.anonymous.deleteworkflow.periodMinutes=2820

user.anonymous.deactivateworkflow.cron=0 0 * * * ?
## Period of time before anonymous data will be deleted in minutes
## 360 minutes = 6 hours
user.anonymous.deactivateworkflow.periodMinutes=360

group.chat.deactivateworkflow.cron=0 0 * * * ?
## Period of time before group chat will be stopped in minutes
## 360 minutes = 6 hours
group.chat.deactivateworkflow.periodMinutes=360

# Inactive session and user deletion workflow
session.inactive.deleteWorkflow.enabled=false
session.inactive.deleteWorkflow.cron=0 0 2 * * ?
session.inactive.deleteWorkflow.check.days=30

# Users with registration only deletion workflow
user.registeredonly.deleteWorkflow.enabled=false
user.registeredonly.deleteWorkflow.cron=0 0 3 * * ?
user.registeredonly.deleteWorkflow.check.days=30
user.registeredonly.deleteWorkflow.afterSessionPurge.enabled=false

# Regular notification of open enquiries
enquiry.open.notification.enabled=false
enquiry.open.notification.cron=0 7 * * * ?
enquiry.open.notification.check.hours=12

# Identity Management
identity.email-dummy-suffix=@beratungcaritas.de
identity.technical-user.username=
identity.technical-user.password=
identity.error-message-duplicated-email=User exists with same email
identity.error-message-duplicated-username=User exists with same username
identity.openid-connect-url=${app.base.url}/auth/realms/online-beratung/protocol/openid-connect
identity.otp-url=${app.base.url}/auth/realms/online-beratung/otp-config
identity.otp-allowed-for-users=false
identity.otp-allowed-for-consultants=false
identity.otp-allowed-for-single-tenant-admins=false
identity.otp-allowed-for-restricted-agency-admins=false
identity.otp-allowed-for-tenant-super-admins=false
identity.display-name-allowed-for-consultants=false

# Springfox/API documentation
springfox.docuTitle=Caritas Online Beratung: UserService
springfox.docuDescription=Provides a REST API service to provide user information and actions.
springfox.docuVersion=0.0.1
springfox.docuTermsUrl=
springfox.docuContactName=
springfox.docuContactUrl=
springfox.docuContactEmail=
springfox.docuLicense=Apache 2.0
springfox.docuLicenseUrl=http://www.apache.org/licenses/LICENSE-2.0.html
springfox.docuPath=/users/docs
# Rocket.Chat
rocket-chat.credential-cron=0 0 * * * ?
rocket-chat.base-url=${app.base.url}/api/v1
rocket-chat.mongo-url=mongodb://<USERNAME>:<PASSWORD>@mongodb:27017/rocketchat?retryWrites=false

# AgencyService API
agency.service.api.url=${app.base.url}/service
agency.service.api.get.agencies=${agency.service.api.url}/
agency.admin.service.api.url=${app.base.url}
# ConsultingTypeService API
consulting.type.service.api.url=

# LiveService API
live.service.api.url=${app.base.url}/service/liveevent

# AppointmentService API
appointment.service.api.url=

# Consultant Import
consultant.import.filename=consultants.csv
consultant.import.protocol.filename=consultants-import.txt
# Asker Import
asker.import.filename=askers.csv
asker.import.withoutsession.filename=askers-without-session.csv
asker.import.protocol.filename=askers-import.txt
asker.import.welcome.message.filename=welcome_consulting_type_[ConsultingType].txt
asker.import.welcome.message.filename.replace.value=[ConsultingType]

# Firebase credential configuration file path
firebase.configuration.push-notifications.enabled=false
firebase.configuration.credentials.file.path=/firebase/firebase-credentials.json
firebase.configuration.notification.message=Du hast eine neue Nachricht erhalten

# Cache Configuration
cache.agencies.configuration.maxEntriesLocalHeap=100
cache.agencies.configuration.eternal=false
cache.agencies.configuration.timeToIdleSeconds=0
cache.agencies.configuration.timeToLiveSeconds=10800

cache.consulting.type.configuration.maxEntriesLocalHeap=100
cache.consulting.type.configuration.eternal=false
cache.consulting.type.configuration.timeToIdleSeconds=0
cache.consulting.type.configuration.timeToLiveSeconds=86400

cache.tenant.configuration.maxEntriesLocalHeap=100
cache.tenant.configuration.eternal=false
cache.tenant.configuration.timeToIdleSeconds=0
cache.tenant.configuration.timeToLiveSeconds=86400

cache.topic.configuration.maxEntriesLocalHeap=100
cache.topic.configuration.eternal=false
cache.topic.configuration.timeToIdleSeconds=0
cache.topic.configuration.timeToLiveSeconds=60

cache.appsettings.configuration.maxEntriesLocalHeap=100
cache.appsettings.configuration.eternal=false
cache.appsettings.configuration.timeToIdleSeconds=0
cache.appsettings.configuration.timeToLiveSeconds=60

# MailService API
mail.service.api.url=http://mailservice:8080/service

# MessageService API
message.service.api.url=http://messageservice:8080/service

# Task executor configuration
thread.executor.corePoolSize=10
thread.executor.maxPoolSize=15
thread.executor.queueCapacity=500
thread.executor.threadNamePrefix=UserService-

# CSRF token
csrf.header.property=
csrf.whitelist.adminUris=/useradmin
csrf.whitelist.configUris=/users/docs,\
  /users/docs/**,\
  /v2/api-docs,\
  /configuration/ui,\
  /swagger-resources/**,\
  /configuration/security,\
  /swagger-ui.html,\
  /actuator/health/**,\
  /actuator/health,\
  /webjars/**
csrf.cookie.property=
csrf.whitelist.header.property=

# RabbitMQ
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=
spring.rabbitmq.password=

# Statistics
statistics.enabled=false
statistics.rabbitmq.exchange.name=statistics.topic

# Jitsi / video chat end-to-end encryption
videochat.e2e-encryption-enabled=false

multitenancy.enabled=false
tenant.service.api.url=http://tenantservice.default:8080
spring.jpa.properties.hibernate.ejb.interceptor=de.caritas.cob.userservice.api.service.TenantHibernateInterceptor
hibernate.current_session_context_class=org.hibernate.context.internal.ThreadLocalSessionContext

# Appointments
appointments.delete-job-cron=0 0 0 * * ?
appointments.delete-job-enabled=false
appointments.lifespan-in-hours=24
feature.topics.enabled=false

feature.demographics.enabled=false
feature.appointment.enabled=false
feature.multitenancy.with.single.domain.enabled=false

management.endpoint.health.enabled=true
management.endpoint.health.show-details=never
management.endpoints.web.exposure.include=health
management.health.probes.enabled=true

external.user.create.tenant.api.token=

