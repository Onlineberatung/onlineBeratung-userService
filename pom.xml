<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<description>Caritas Online Beratung: UserService</description>

	<groupId>de.caritas.cob</groupId>
	<artifactId>userservice</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>UserService</name>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.12.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>11</java.version>
		<skip.unit-tests>false</skip.unit-tests>
		<skip.integration-tests>false</skip.integration-tests>
		<keycloak.version>17.0.0</keycloak.version>
		<springfox.version>2.9.2</springfox.version>
		<powermock.version>2.0.2</powermock.version>
		<adapters.web.generated.path>
			${project.groupId}.${project.artifactId}.generated.api.adapters.web
		</adapters.web.generated.path>
		<adapters.web.dto.path>
			${project.groupId}.${project.artifactId}.api.adapters.web.dto
		</adapters.web.dto.path>
		<log4j.version>2.17.1
		</log4j.version> <!-- force safe version due to https://logging.apache.org/log4j/2.x/security.html -->
		<commons-text.version>1.10.0</commons-text.version>
		<commons-validator.version>1.7</commons-validator.version>
		<liquibase-maven-plugin.version>4.8.0</liquibase-maven-plugin.version>
		<javax.ws.rs-api.version>2.1.1</javax.ws.rs-api.version>
		<spring-boot-starter-web.version>2.6.6</spring-boot-starter-web.version>
		<spring-security-core.version>5.7.5</spring-security-core.version>
		<spring-beans.version>5.2.20.RELEASE</spring-beans.version>
		<spring-webmvc.version>5.2.20.RELEASE</spring-webmvc.version>
		<spring-core.version>5.2.20.RELEASE</spring-core.version>
		<json-smart.version>2.4.7</json-smart.version>
		<springfox-swagger-ui.version>2.10.0</springfox-swagger-ui.version>
		<spring-context-support.version>5.3.23</spring-context-support.version>
		<ehcache.version>2.10.9.2</ehcache.version>
		<testcontainers.version>1.17.6</testcontainers.version>
	</properties>

	<dependencies>
		<!-- Spring Boot dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${spring-boot-starter-web.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${spring-security-core.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring-beans.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-webmvc.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring-core.version}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>

		<dependency>
			<groupId>net.minidev</groupId>
			<artifactId>json-smart</artifactId>
			<version>${json-smart.version}</version>
		</dependency>

		<!-- Search dependency -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-search-orm</artifactId>
			<version>5.11.10.Final</version>
		</dependency>

		<!-- Swagger/OpenAPI dependencies -->
		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>openapi-generator-maven-plugin</artifactId>
			<version>5.3.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>0.2.2</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<version>3.3.0</version>
		</dependency>
		<!-- SpringFox: generate YAML file from POJOs and generate documentation -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-bean-validators</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${springfox-swagger-ui.version}</version>
		</dependency>

		<!-- Keycloak dependencies -->
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-spring-security-adapter</artifactId>
			<version>${keycloak.version}</version>
		</dependency>
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-spring-boot-starter</artifactId>
			<version>${keycloak.version}</version>
		</dependency>
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-admin-client</artifactId>
			<version>${keycloak.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>${javax.ws.rs-api.version}</version>
		</dependency>

		<!-- Lombok dependencies -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.github.jknack</groupId>
			<artifactId>handlebars</artifactId>
			<version>4.3.1</version>
		</dependency>

		<!-- Apache Commons Lang -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<!-- Apache Commons Text -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>${commons-text.version}</version>
		</dependency>

		<!-- Commons Validator -->
		<dependency>
			<groupId>commons-validator</groupId>
			<artifactId>commons-validator</artifactId>
			<version>${commons-validator.version}</version>
		</dependency>

		<!-- Commons Codec -->
		<dependency>
		    <groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		</dependency>

		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-maven-plugin</artifactId>
			<version>${liquibase-maven-plugin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<version>4.8.0</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-to-slf4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>7.0.1</version>
		</dependency>

		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.14.3</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
			<version>1.8</version>
		</dependency>
		<dependency>
			<groupId>org.passay</groupId>
			<artifactId>passay</artifactId>
			<version>1.6.1</version>
		</dependency>

		<dependency>
			<groupId>com.neovisionaries</groupId>
			<artifactId>nv-i18n</artifactId>
			<version>1.29</version>
		</dependency>

		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>${ehcache.version}</version>
			<exclusions>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring-context-support.version}</version>
		</dependency>

		<!-- Push notification firebase dependency -->
		<dependency>
			<groupId>com.google.firebase</groupId>
			<artifactId>firebase-admin</artifactId>
			<version>8.1.0</version>
		</dependency>

		<!-- Test scope dependencies -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jeasy</groupId>
			<artifactId>easy-random-core</artifactId>
			<version>5.0.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.security</groupId>
					<artifactId>spring-security-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<artifactId>powermock-module-junit4</artifactId>
			<groupId>org.powermock</groupId>
			<scope>test</scope>
			<version>${powermock.version}</version>
		</dependency>
		<dependency>
			<artifactId>powermock-api-mockito2</artifactId>
			<groupId>org.powermock</groupId>
			<scope>test</scope>
			<version>${powermock.version}</version>
		</dependency>
		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<scope>test</scope>
			<version>0.10.2</version>
		</dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
			<version>4.4</version>
    </dependency>
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mariadb</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>5.8.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.github.fridujo</groupId>
			<artifactId>rabbitmq-mock</artifactId>
			<version>1.1.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>net.javacrumbs.json-unit</groupId>
			<artifactId>json-unit</artifactId>
			<version>2.28.0</version>
			<scope>test</scope>
		</dependency>

		<!-- Documentation dependencies -->
		<dependency>
			<groupId>net.sourceforge.plantuml</groupId>
			<artifactId>plantuml</artifactId>
			<version>1.2021.16</version>
		</dependency>

		<!-- MongoDB dependencies -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>3.12.11</version>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>1_maven.apache.org</id>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
			<url>https://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
		</repository>
		<repository>
			<id>jitpack.io</id>
			<url>https://jitpack.io</url>
		</repository>
	</repositories>

	<build>
		<finalName>${project.name}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!--
              Add generated sources as source directory
      -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- OpenAPI codegen maven plugin: generates api stubs -->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>5.1.1</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/api/userservice.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>${adapters.web.generated.path}.controller</apiPackage>
							<modelPackage>${adapters.web.dto.path}</modelPackage>
							<generateSupportingFiles>true</generateSupportingFiles>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<sourceFolder>/</sourceFolder>
							</configOptions>
							<output>target/generated-sources</output>
							<importMappings>
								<importMapping>UserDTO=${adapters.web.dto.path}.UserDTO</importMapping>
								<importMapping>SessionUserDTO=${adapters.web.dto.path}.SessionUserDTO
								</importMapping>
								<importMapping>
									SessionConsultantForUserDTO=${adapters.web.dto.path}.SessionConsultantForUserDTO
								</importMapping>
								<importMapping>
									GroupSessionConsultantDTO=${adapters.web.dto.path}.GroupSessionConsultantDTO
								</importMapping>
								<importMapping>UserChatDTO=${adapters.web.dto.path}.UserChatDTO</importMapping>
								<importMapping>UserDataResponseDTO=${adapters.web.dto.path}.UserDataResponseDTO
								</importMapping>
								<importMapping>MonitoringDTO=${adapters.web.dto.path}.MonitoringDTO</importMapping>
								<importMapping>ChatDTO=${adapters.web.dto.path}.ChatDTO</importMapping>
								<importMapping>NewRegistrationDto=${adapters.web.dto.path}.NewRegistrationDto
								</importMapping>
								<importMapping>Date=java.util.Date</importMapping>
								<importMapping>HttpStatus=org.springframework.http.HttpStatus</importMapping>
							</importMappings>
							<typeMappings>
								<typeMapping>UserDTO=${adapters.web.dto.path}.UserDTO</typeMapping>
								<typeMapping>SessionUserDTO=${adapters.web.dto.path}.SessionUserDTO</typeMapping>
								<typeMapping>
									SessionConsultantForUserDTO=${adapters.web.dto.path}.SessionConsultantForUserDTO
								</typeMapping>
								<typeMapping>
									GroupSessionConsultantDTO=${adapters.web.dto.path}.GroupSessionConsultantDTO
								</typeMapping>
								<typeMapping>UserChatDTO=${adapters.web.dto.path}.UserChatDTO</typeMapping>
								<typeMapping>UserDataResponseDTO=${adapters.web.dto.path}.UserDataResponseDTO
								</typeMapping>
								<typeMapping>MonitoringDTO=${adapters.web.dto.path}.MonitoringDTO</typeMapping>
								<typeMapping>ChatDTO=${adapters.web.dto.path}.ChatDTO</typeMapping>
								<typeMapping>NewRegistrationDto=${adapters.web.dto.path}.NewRegistrationDto
								</typeMapping>
							</typeMappings>
						</configuration>
					</execution>
					<execution>
						<id>appointment-service</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/api/appointmentservice.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>${adapters.web.generated.path}.controller</apiPackage>
							<modelPackage>${adapters.web.dto.path}</modelPackage>
							<generateSupportingFiles>true</generateSupportingFiles>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<interfaceOnly>true</interfaceOnly>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<output>target/generated-sources</output>
							<typeMappings>
								<typeMapping>OffsetDateTime=Instant</typeMapping>
							</typeMappings>
							<importMappings>
								<importMapping>java.time.OffsetDateTime=java.time.Instant</importMapping>
							</importMappings>
						</configuration>
					</execution>
					<execution>
						<id>application-settings-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/applicationsettingsservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.applicationsettingsservice.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.applicationsettingsservice.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>user-admin-service</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<sourceFolder>/</sourceFolder>
							</configOptions>
							<inputSpec>${project.basedir}/api/useradminservice.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>${adapters.web.generated.path}.controller</apiPackage>
							<modelPackage>${adapters.web.dto.path}</modelPackage>
							<generateSupportingFiles>true</generateSupportingFiles>
							<output>target/generated-sources</output>
							<typeMappings>
								<typeMapping>
									RoleConsultantDTO=${project.groupId}.${project.artifactId}.api.manager.consultingtype.roles.Consultant
								</typeMapping>
							</typeMappings>
						</configuration>
					</execution>
					<execution>
						<id>statistics-service</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<sourceFolder>/</sourceFolder>
							</configOptions>
							<inputSpec>${project.basedir}/api/userstatisticsservice.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>${project.groupId}.${project.artifactId}.generated.api.statistics.controller</apiPackage>
							<modelPackage>${project.groupId}.${project.artifactId}.api.statistics.model
							</modelPackage>
							<generateSupportingFiles>true</generateSupportingFiles>
							<output>target/generated-sources</output>
						</configuration>
					</execution>
					<!-- Generate conversations API -->
					<execution>
						<id>conversation-service</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<sourceFolder>/</sourceFolder>
							</configOptions>
							<inputSpec>${project.basedir}/api/conversationservice.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>
								${project.groupId}.${project.artifactId}.generated.api.conversation.controller
							</apiPackage>
							<modelPackage>${adapters.web.dto.path}</modelPackage>
							<generateSupportingFiles>true</generateSupportingFiles>
							<output>target/generated-sources</output>
							<importMappings>
								<importMapping>SessionUserDTO=${adapters.web.dto.path}.SessionUserDTO
								</importMapping>
								<importMapping>UserChatDTO=${adapters.web.dto.path}.UserChatDTO</importMapping>
								<importMapping>Date=java.util.Date</importMapping>
							</importMappings>
							<typeMappings>
								<typeMapping>SessionUserDTO=${adapters.web.dto.path}.SessionUserDTO</typeMapping>
								<typeMapping>UserChatDTO=${adapters.web.dto.path}.UserChatDTO</typeMapping>
							</typeMappings>
						</configuration>
					</execution>
					<!-- Generate admin API markdown files -->
					<execution>
						<id>user-admin-service-markdown</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
							</configOptions>
							<inputSpec>${project.basedir}/api/useradminservice.yaml</inputSpec>
							<generatorName>markdown</generatorName>
							<output>target/generated-sources/markdown/userservice</output>
							<apiPackage>./</apiPackage>
							<modelPackage>model</modelPackage>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<generateSupportingFiles>false</generateSupportingFiles>
						</configuration>
					</execution>
					<!-- Generate client API for live service -->
					<execution>
						<id>liveservice-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>native</library>
								<asyncNative>true</asyncNative>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/liveservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>${project.groupId}.${project.artifactId}.liveservice.generated.web</apiPackage>
							<modelPackage>${project.groupId}.${project.artifactId}.liveservice.generated.web.model</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>consulting-type-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/consultingtypeservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.consultingtypeservice.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.consultingtypeservice.generated.web.model
							</modelPackage>
							<typeMappings>
								<typeMapping>
									RoleConsultantDTO=${project.groupId}.${project.artifactId}.api.manager.consultingtype.roles.Consultant
								</typeMapping>
							</typeMappings>
						</configuration>
					</execution>
					<!-- Generate client API for agency admin service -->
					<execution>
						<id>agency-admin-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/agencyadminservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.agencyadminserivce.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.agencyadminserivce.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<!-- Generate client API for agency service -->
					<execution>
						<id>agency-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/agencyservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.agencyserivce.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.agencyserivce.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<!-- Generate client API for MessageService -->
					<execution>
						<id>messageservice-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/messageservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>${project.groupId}.${project.artifactId}.messageservice.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.messageservice.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<!-- Generate client API for mail service -->
					<execution>
						<id>mail-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/mailservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>${project.groupId}.${project.artifactId}.mailservice.generated.web</apiPackage>
							<modelPackage>${project.groupId}.${project.artifactId}.mailservice.generated.web.model</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>statistics-type-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/statisticsservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<modelPackage>
								${project.groupId}.${project.artifactId}.statisticsservice.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>tenant-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/tenantservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.tenantservice.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.tenantservice.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>tenant-admin-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/tenantadminservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.tenantadminservice.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.tenantadminservice.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>topic-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/topicservice.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.topicservice.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.topicservice.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>appointment-service-client-model</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<sourceFolder>/</sourceFolder>
								<library>resttemplate</library>
								<dateLibrary>java8</dateLibrary>
							</configOptions>
							<inputSpec>${project.basedir}/services/appointmentService.yaml</inputSpec>
							<generatorName>java</generatorName>
							<generateApis>true</generateApis>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<apiPackage>
								${project.groupId}.${project.artifactId}.appointmentservice.generated.web
							</apiPackage>
							<modelPackage>
								${project.groupId}.${project.artifactId}.appointmentservice.generated.web.model
							</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>keycloak-extension</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<sourceFolder>/</sourceFolder>
							</configOptions>
							<inputSpec>${project.basedir}/services/keycloakextension.yaml</inputSpec>
							<generateApis>false</generateApis>
							<generateSupportingFiles>false</generateSupportingFiles>
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<generatorName>spring</generatorName>
							<modelPackage>${project.groupId}.${project.artifactId}.api.model</modelPackage>
							<generateSupportingFiles>true</generateSupportingFiles>
							<output>target/generated-sources</output>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Liquibase Maven plugin -->
			<plugin>
				<groupId>org.liquibase</groupId>
				<artifactId>liquibase-maven-plugin</artifactId>
				<version>${liquibase-maven-plugin.version}</version>
				<configuration>
					<propertyFile>src/main/resources/liquibase.properties</propertyFile>
				</configuration>
			</plugin>
			<!-- Code style check -->
			<plugin>
				<groupId>com.diffplug.spotless</groupId>
				<artifactId>spotless-maven-plugin</artifactId>
				<version>2.23.0</version>
				<configuration>
					<java>
						<toggleOffOn />
						<googleJavaFormat>
							<version>1.15.0</version>
							<style>GOOGLE</style>
						</googleJavaFormat>
					</java>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
						<phase>compile</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId> <!-- surefire plugin version managed by Spring Boot -->
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
				<executions>
					<execution>
						<id>unit-tests</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.unit-tests}</skipTests>
							<includes>
								<include>**/*Test.java</include>
							</includes>
						</configuration>
					</execution>
					<execution>
						<id>integration-tests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration-tests}</skipTests>
							<includes>
								<include>**/*IT.*</include>
							</includes>
							<excludes>
								<exclude>**/LiquibaseHibernateIT.java</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>local</id>
			<properties>
				<activeSpringProfile>local</activeSpringProfile>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>dev</id>
			<properties>
				<activeSpringProfile>dev</activeSpringProfile>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<activeSpringProfile>prod</activeSpringProfile>
			</properties>
		</profile>
	</profiles>

</project>
